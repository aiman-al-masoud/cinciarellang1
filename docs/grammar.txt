/**
* This is meant to be an approximate pseudo-EBNF description of the grammar,
* but it is not perfectly accurate and may not always reflect the actual behaviour
* of the compiler.
*/


<statement> ::=  <expression-statement>
             	 | <selection-statement>
             	 | <compound-statement>


// args?
<function-definition> ::=  fun()<compound-statement>

<compound-statement> ::= {  <statement>* }


<selection-statement> ::= if <expression>  <compound-statement>    
                        | if <expression>  <compound-statement> else <compound-statement> 


<expression-statement> ::= <expression>;   //an expression ending in semicolon


<expression> ::= <assignment-expression>


// or also <conditional-expression> by itself???
<assignment-expression> ::=   <indetifier> = <conditional-expression> 
                            | <indetifier> = <function-definition>
                            | <indetifier> = <assignment-expression>
                            

// maybe leave out the ternary operator initially
<conditional-expression> ::= <logical-or-expression>
                             | <logical-or-expression> ? <expression> : <conditional-expression>

<logical-or-expression> ::= <logical-and-expression>
                             | <logical-and-expression> || <logical-or-expression> 

<logical-and-expression> ::= <equality-expression>
                             | <equality-expression> && <logical-and-expression> 
                    

<equality-expression> ::= <additive-expression>
                          | <additive-expression> == <equality-expression> 
                          | <additive-expression> != <equality-expression> 
                          | <additive-expression> <  <equality-expression>  
                          | <additive-expression> >  <equality-expression>  
                          | <additive-expression> <= <equality-expression>  
                          | <additive-expression> >= <equality-expression>  


                          
<additive-expression> ::= <multiplicative-expression>
                          |  <multiplicative-expression> + <additive-expression>
                          |  <multiplicative-expression> - <additive-expression> 



<multiplicative-expression> ::= <unary-expression> 
                                | <unary-expression> * <multiplicative-expression> 
                                | <unary-expression> / <multiplicative-expression>  



// replaced <unary-expression> in  //function call
<unary-expression> ::= <primary-expression>
                       | <unary-operator> <unary-expression> // like negation 
                       | <primary-expression>  ( <assignment-expression>* )  //function call


<unary-operator>  ::= -
		     |!


<primary-expression> ::= <identifier>
                         | <constant>
                         | ( <expression> )


//aka: literal                   
<constant> ::= <number>
               | <string>
               | <bool>
